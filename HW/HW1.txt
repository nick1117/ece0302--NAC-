### Carrano Ch 1 Exercise 2a- page 28 ######################################################################

/***
advanced the date by one day
@pre the date must be a usable date 
@post the date will be incremented by one day
@arguments none
@return none */
advanceDate(anEntry)

### Carrano Ch 1 Exercise 5 ######################################################################
    
int RemoveAndCount(std::vector& bag, std::string & item)){
    if bag.empty(){
        return 0;
    }
    int count = std::count(bag.begin(), bag.end(), item);
    bag.erase(std::remove(bag.begin(), bag.end(), item), bag.end());
    if (count == 0) {
        std::cout << "The item is not in the bag";
    }
    return count;
}
    
### Carrano Ch 3 Exercise 2 - page 115 ######################################################################

bool replace(T& bag, const T& oldItem, const T& newItem){
    for (item : bag){
        if(item == oldItem){
            item = newItem;
            return true;
        }
    }
    return false;
}

### Carrano Ch 3 Exercise 3 ######################################################################

A) Making replace in terms of ADT bag operations make it adaptable for different ADT bag uses. It makes the program more modular and cna be used for
different 'Bags'. Some disadvantages is if the bag is large it might take a while to iterate through. Also if the replace function is not
modular enough it might cause inefficency.

B) Advantages to adding replace to the ADT bag is that it allows users to expect a standard set of operations such as replace whihch help users
by making the program more user friendly. A disadvantage is that it increase complexity and the replace function might not be effective for all types
of bags. 

### Carrano Ch 3 Exercise 5 ######################################################################

class interfaceTriangle{
public:
    virtual double getSide1() const = 0;
    virtual double getSide2() const = 0;
    virtual double getSide3() const = 0;
    virtual double getAngle1() const = 0;
    virtual double getAngle2() const = 0;
    virtual double getAngle3() const = 0;
    virtual setSides(double, double, double) const = 0;
    virtual setAngles(double, double, double) const = 0;
    virtual double GetArea() const = 0;
    virtual bool Right() const = 0;
    virtual bool Equilateral() const = 0;
    virtual bool Isoceles() const = 0;
    virtual ~TriangleInterface() {}
};

class Triangle : public interfaceTriangle {
private:
    double side1, side2, side3;
    double angle1, angle2, angle3;

public:
    Triangle() { side1 = 0; side2 = 0; side3 = 0; angle1 = 0; angle2 = 0; angle3 = 0; }


    Triangle(double s1, double s2, double s3, double a1, double a2, double a3)
        {} side1 = s1; side2 = s2; side3 = s3; angle1 = a1; angle2 = a2; angle3 = a3; }

    double getSide1() const { return side1; }
    double getSide2() const { return side2; }
    double getSide3() const { return side3; }
    double getAngle1() const { return angle1; }
    double getAngle2() const { return angle2; }
    double getAngle3() const { return angle3; }

    void setSides(double s1, double s2, double s3) {
        side1 = s1;
        side2 = s2;
        side3 = s3;
    }

    void setAngles(double a1, double a2, double a3) {
        angle1 = a1;
        angle2 = a2;
        angle3 = a3;
    }

    double GetArea() const {
        double s = (side1 + side2 + side3) / 2.0;
        return (sqrt(s * (s - side1) * (s - side2) * (s - side3)));
    }

    bool Right() const {
        return (angle1 == 90.0 || angle2 == 90.0 || angle3 == 90.0);
    }

    bool Equilateral() const {
        return (side1 == side2 && side2 == side3);
    }

    bool Isoceles() const {
        return (side1 == side2 || side1 == side3 || side2 == side3);
    }
};